{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY Jexactyl PANEL - jexactyl.com",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-11-06T12:36:45+00:00",
    "name": "Retroactyl Java",
    "author": "mail@retronodes.cloud",
    "description": "Minecraft server software selector for Java Edition, compatible with both ARM64 and Intel or AMD-based hardware. Select from Paper, Forge, Pufferfish, Purpur, and Vanilla Minecraft.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8"
    },
    "file_denylist": [],
    "startup": ".\/startup.sh",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Ensure SERVER_SOFTWARE is defined (if it\u2019s empty, set it to Paper by default)\r\nSERVER_SOFTWARE=\"${SERVER_SOFTWARE:-Paper}\"\r\n\r\n# Helper function for Java installation\r\ninstall_java_21() {\r\n    if ! java -version 2>&1 | grep \"21\" &> \/dev\/null; then\r\n        echo \"Java 21 is not installed. Installing Java 21...\"\r\n        if command -v apk &> \/dev\/null; then\r\n            apk update\r\n            apk add --no-cache openjdk21\r\n        elif command -v apt-get &> \/dev\/null; then\r\n            apt-get update\r\n            apt-get install -y openjdk-21-jdk\r\n        elif command -v yum &> \/dev\/null; then\r\n            yum install -y java-21-openjdk\r\n        else\r\n            echo \"Java installation failed. Please install Java 21 manually.\"\r\n            exit 1\r\n        fi\r\n    else\r\n        echo \"Java 21 is already installed.\"\r\n    fi\r\n}\r\n\r\n# Main installation section\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || { echo \"Failed to navigate to \/mnt\/server\"; exit 1; }\r\n\r\ncase \"$SERVER_SOFTWARE\" in\r\n    \"Paper\")\r\n        echo \"Starting Paper installation...\"\r\n        install_java_21\r\n        PROJECT=paper\r\n        # Fetch version and build information\r\n        MINECRAFT_VERSION=${MINECRAFT_VERSION:-Latest}\r\n        SERVER_JARFILE=server.jar\r\n        \r\n        # Set up download URL for Paper or default to latest\r\n        if [ -n \"${DL_PATH}\" ]; then\r\n            DOWNLOAD_URL=\"${DL_PATH}\"\r\n        else\r\n            # Determine latest build if version is not specified\r\n            LATEST_VERSION=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT} | jq -r '.versions[-1]')\r\n            BUILD_NUMBER=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${LATEST_VERSION} | jq -r '.builds[-1]')\r\n            JAR_NAME=\"${PROJECT}-${LATEST_VERSION}-${BUILD_NUMBER}.jar\"\r\n            DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${LATEST_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_NAME}\"\r\n        fi\r\n\r\n        echo \"Downloading Paper from $DOWNLOAD_URL\"\r\n        curl -o \"$SERVER_JARFILE\" \"$DOWNLOAD_URL\"\r\n        echo \"Paper installation complete.\"\r\n        \r\n        # Rename the jar file to server.jar\r\n        DEFAULT_JAR=$(ls *.jar | head -n 1)\r\n        if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n            mv \"$DEFAULT_JAR\" server.jar\r\n            echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n        else\r\n            echo \"No server jar file found after installation.\"\r\n            exit 1\r\n        fi\r\n        \r\n        # Paper startup command with unix_args.txt check\r\n        echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n        ;;\r\n\r\n    \"Forge\")\r\n        echo \"Starting Forge installation...\"\r\n        install_java_21\r\n\r\n        # Fetch the latest Minecraft version for Forge from GitHub\r\n        FULL_VERSION=$(curl -sSL https:\/\/raw.githubusercontent.com\/retronodes\/mcapi\/refs\/heads\/main\/forge)\r\n    \r\n        # Extract only the MC_VERSION from the fetched data\r\n        MC_VERSION=$(echo \"$FULL_VERSION\" | cut -d '-' -f 1)\r\n\r\n        if [[ -z \"$MC_VERSION\" ]]; then\r\n        echo \"Failed to retrieve the latest Minecraft version for Forge. Exiting.\"\r\n        exit 1\r\n        fi\r\n\r\n        # Fetch the recommended Forge version for the given Minecraft version\r\n        JSON_DATA=$(curl -sSL https:\/\/files.minecraftforge.net\/maven\/net\/minecraftforge\/forge\/promotions_slim.json)\r\n        FORGE_VERSION=$(echo \"$JSON_DATA\" | jq -r \".promos.\\\"${MC_VERSION}-recommended\\\"\")\r\n\r\n        if [[ -z \"$FORGE_VERSION\" || \"$FORGE_VERSION\" == \"null\" ]]; then\r\n        echo \"Unable to determine the recommended Forge version for Minecraft $MC_VERSION. Exiting.\"\r\n        exit 1\r\n        fi\r\n\r\n        # Construct the download URL\r\n        DOWNLOAD_LINK=\"https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${MC_VERSION}-${FORGE_VERSION}\/forge-${MC_VERSION}-${FORGE_VERSION}-installer.jar\"\r\n\r\n        echo \"Downloading Forge from $DOWNLOAD_LINK\"\r\n        curl -o installer.jar \"$DOWNLOAD_LINK\"\r\n        java -jar installer.jar --installServer\r\n        rm installer.jar\r\n        echo \"Forge installation complete.\"\r\n    \r\n        # Rename the jar file to server.jar\r\n        DEFAULT_JAR=$(ls *.jar | grep -v \"installer.jar\" | head -n 1)\r\n        if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n        mv \"$DEFAULT_JAR\" server.jar\r\n        echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n        else\r\n        echo \"No server jar file found after installation.\"\r\n        exit 1\r\n        fi\r\n    \r\n        # Forge startup command with unix_args.txt check\r\n        echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true $( [ ! -f unix_args.txt ] && printf %s \"-jar server.jar\" || printf %s \"@unix_args.txt\" )' > startup.sh\r\n        ;;\r\n\r\n    \"Pufferfish\")\r\n\techo \"Starting Pufferfish installation...\"\r\n    \tinstall_java_21\r\n\r\n\t# Install required packages for Alpine\r\n\techo \"Installing required packages...\"\r\n\tapk add --no-cache curl jq\r\n\r\n\t# Function to fetch the latest build number\r\n\tfetch_latest_build_number() {\r\n    \tBUILD_INFO=$(curl -s \"https:\/\/ci.pufferfish.host\/job\/Pufferfish-1.21\/api\/json?tree=lastBuild%5Bnumber%2Curl%5D\")\r\n    \techo \"$BUILD_INFO\" | jq -r '.lastBuild.number'\r\n\t}\r\n\r\n\t# Function to fetch the latest Pufferfish version from the GitHub file\r\n\tfetch_latest_version() {\r\n    \t# Replace with the raw URL to your GitHub file\r\n    \tVERSION_FILE_URL=\"https:\/\/raw.githubusercontent.com\/retronodes\/mcapi\/refs\/heads\/main\/pufferfish\"\r\n    \r\n    \t# Fetch the latest version\r\n    \tLATEST_VERSION=$(curl -s \"$VERSION_FILE_URL\")\r\n\r\n    \t# Check if the version was retrieved successfully\r\n    \tif [ -z \"$LATEST_VERSION\" ]; then\r\n        \techo \"Failed to retrieve the latest version.\"\r\n        \texit 1\r\n    \tfi\r\n\r\n    \techo \"$LATEST_VERSION\"\r\n\t}\r\n\r\n\t# Fetch the latest build number\r\n\tLATEST_BUILD_NUMBER=$(fetch_latest_build_number)\r\n\r\n\t# Fetch the Minecraft version from GitHub file\r\n\tLATEST_MC_VERSION=$(fetch_latest_version)\r\n\r\n\t# Debugging output\r\n\techo \"Raw Build Info: $(curl -s \"https:\/\/ci.pufferfish.host\/job\/Pufferfish-1.21\/api\/json?tree=lastBuild%5Bnumber%2Curl%5D\")\"\r\n\r\n\t# Check if the latest build number and Minecraft version were fetched successfully\r\n\tif [ -z \"$LATEST_BUILD_NUMBER\" ] || [ -z \"$LATEST_MC_VERSION\" ]; then\r\n    \techo \"Failed to retrieve the latest build number or Minecraft version.\"\r\n    \techo \"Latest build number: $LATEST_BUILD_NUMBER\"\r\n    \techo \"Latest Minecraft version: $LATEST_MC_VERSION\"\r\n    \texit 1\r\n\tfi\r\n\r\n\t# Construct the latest download URL\r\n\tLATEST_BUILD_URL=\"https:\/\/ci.pufferfish.host\/job\/Pufferfish-1.21\/$LATEST_BUILD_NUMBER\/artifact\/build\/libs\/pufferfish-paperclip-$LATEST_MC_VERSION-R0.1-SNAPSHOT-mojmap.jar\"\r\n\r\n\t# Output the constructed URL\r\n\techo \"Latest build number: $LATEST_BUILD_NUMBER\"\r\n\techo \"Latest Minecraft version: $LATEST_MC_VERSION\"\r\n\techo \"Latest build URL: $LATEST_BUILD_URL\"\r\n\r\n\t# Download the latest build\r\n\techo \"Downloading the latest build...\"\r\n\tcurl -L -o \"pufferfish-paperclip-$LATEST_MC_VERSION.jar\" \"$LATEST_BUILD_URL\"\r\n\r\n\t# Check if the download was successful\r\n\tif [ $? -eq 0 ]; then\r\n    \techo \"Download completed successfully.\"\r\n\telse\r\n    \techo \"Failed to download the latest build.\"\r\n    \texit 1\r\n\tfi\t\r\n\r\n\t# Rename the jar file to server.jar\r\n        DEFAULT_JAR=$(ls *.jar | grep -v \"installer.jar\" | head -n 1)\r\n        if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n            mv \"$DEFAULT_JAR\" server.jar\r\n            echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n        else\r\n            echo \"No server jar file found after installation.\"\r\n            exit 1\r\n        fi\r\n\r\n        # Pufferfish startup command with unix_args.txt check\r\n        echo 'java -Xms4096M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:InitiatingHeapOccupancyPercent=15 -Dusing.aikars.flags=https:\/\/mcflags.emc.gs -Daikars.new.flags=true -jar server.jar nogui' > startup.sh\r\n        ;;\r\n\r\n    \"Purpur\")\r\n        echo \"Starting Purpur installation...\"\r\n        install_java_21\r\n        PROJECT=purpur\r\n\r\n        if [ -n \"${DL_PATH}\" ]; then\r\n        echo -e \"Using supplied download url: ${DL_PATH}\"\r\n        DOWNLOAD_URL=$(eval echo $(echo ${DL_PATH} | sed -e 's\/{{\/${\/g' -e 's\/}}\/}\/g'))\r\n        else\r\n        VER_EXISTS=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep true)\r\n        LATEST_VERSION=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT} | jq -r '.versions' | jq -r '.[-1]')\r\n\r\n        if [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n            echo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n        else\r\n            echo -e \"Using the latest ${PROJECT} version\"\r\n            MINECRAFT_VERSION=${LATEST_VERSION}\r\n        fi\r\n        \r\n        BUILD_EXISTS=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds.all | tostring | contains($BUILD)' | grep true)\r\n        LATEST_BUILD=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION} | jq -r '.builds.latest')\r\n        \r\n        if [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n            echo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n        else\r\n            echo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION}\"\r\n            BUILD_NUMBER=${LATEST_BUILD}\r\n        fi\r\n        \r\n        JAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n        \r\n        echo \"Version being downloaded\"\r\n        echo -e \"MC Version: ${MINECRAFT_VERSION}\"\r\n        echo -e \"Build: ${BUILD_NUMBER}\"\r\n        echo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n        DOWNLOAD_URL=https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION}\/${BUILD_NUMBER}\/download\r\n        fi\r\n\r\n        cd \/mnt\/server\r\n\r\n        echo -e \"Running curl -o ${JAR_NAME} ${DOWNLOAD_URL}\"\r\n\r\n        if [ -f ${JAR_NAME} ]; then\r\n        mv ${JAR_NAME} ${JAR_NAME}.old\r\n        fi\r\n\r\n        curl -o ${JAR_NAME} ${DOWNLOAD_URL}\r\n\r\n        # Ensure ${SERVER_JARFILE} points to the correct downloaded jar\r\n        SERVER_JARFILE=${JAR_NAME}\r\n\r\n        if [ ! -f server.properties ]; then\r\n        echo -e \"Downloading MC server.properties\"\r\n        curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n        fi\r\n\r\n\t# Rename the jar file to server.jar\r\n        DEFAULT_JAR=$(ls *.jar | head -n 1)\r\n        if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n            mv \"$DEFAULT_JAR\" server.jar\r\n            echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n        else\r\n            echo \"No server jar file found after installation.\"\r\n            exit 1\r\n        fi\r\n\r\n        # Purpur startup command with unix_args.txt check\r\n        echo 'java --add-modules=jdk.incubator.vector -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n        ;;\r\n\r\n    \"Vanilla\")\r\n        echo \"Starting Vanilla installation...\"\r\n        # Server Files: \/mnt\/server\r\n\tmkdir -p \/mnt\/server\r\n\tcd \/mnt\/server\r\n\r\n\tLATEST_VERSION=`curl https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq -r '.latest.release'`\r\n\tLATEST_SNAPSHOT_VERSION=`curl https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq -r '.latest.snapshot'`\r\n\r\n\techo -e \"latest version is $LATEST_VERSION\"\r\n\techo -e \"latest snapshot is $LATEST_SNAPSHOT_VERSION\"\r\n\r\n\tif [ -z \"$VANILLA_VERSION\" ] || [ \"$VANILLA_VERSION\" == \"Latest\" ]; then\r\n  \tMANIFEST_URL=$(curl -sSL https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq --arg VERSION $LATEST_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\n\telif [ \"$VANILLA_VERSION\" == \"snapshot\" ]; then\r\n  \tMANIFEST_URL=$(curl -sSL https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq --arg VERSION $LATEST_SNAPSHOT_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\n\telse\r\n  \tMANIFEST_URL=$(curl -sSL https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq --arg VERSION $VANILLA_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\n\tfi\r\n\r\n\tDOWNLOAD_URL=$(curl ${MANIFEST_URL} | jq .downloads.server | jq -r '. | .url')\r\n\r\n\techo -e \"running: curl -o server.jar $DOWNLOAD_URL\"\r\n\tcurl -o server.jar $DOWNLOAD_URL\r\n\r\n\techo -e \"Install Complete\"\r\n\r\n        # Vanilla startup command with unix_args.txt check\r\n        echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -jar server.jar' > startup.sh\r\n        ;;\r\n\r\n    *)\r\n        echo \"Unrecognized server software: $SERVER_SOFTWARE. Defaulting to Paper latest.\"\r\n        SERVER_SOFTWARE=\"paper\"\r\n        echo \"Starting Paper installation...\"\r\n        install_java_21\r\n        PROJECT=paper\r\n        # Fetch version and build information\r\n        MINECRAFT_VERSION=${MINECRAFT_VERSION:-Latest}\r\n        SERVER_JARFILE=server.jar\r\n        \r\n        # Set up download URL for Paper or default to latest\r\n        if [ -n \"${DL_PATH}\" ]; then\r\n            DOWNLOAD_URL=\"${DL_PATH}\"\r\n        else\r\n            # Determine latest build if version is not specified\r\n            LATEST_VERSION=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT} | jq -r '.versions[-1]')\r\n            BUILD_NUMBER=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${LATEST_VERSION} | jq -r '.builds[-1]')\r\n            JAR_NAME=\"${PROJECT}-${LATEST_VERSION}-${BUILD_NUMBER}.jar\"\r\n            DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${LATEST_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_NAME}\"\r\n        fi\r\n\r\n        echo \"Downloading Paper from $DOWNLOAD_URL\"\r\n        curl -o \"$SERVER_JARFILE\" \"$DOWNLOAD_URL\"\r\n        echo \"Paper installation complete.\"\r\n        \r\n        # Rename the jar file to server.jar\r\n        DEFAULT_JAR=$(ls *.jar | head -n 1)\r\n        if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n            mv \"$DEFAULT_JAR\" server.jar\r\n            echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n        else\r\n            echo \"No server jar file found after installation.\"\r\n            exit 1\r\n        fi\r\n        \r\n        # Paper startup command with unix_args.txt check\r\n        echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n        ;;\r\nesac\r\n\r\n# Final setup and permissions\r\nchmod +x startup.sh\r\necho \"Setup complete. You may click on the start button.\"",
            "container": "ghcr.io\/pterodactyl\/installers:alpine",
            "entrypoint": "ash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "Installs the latest version of Minecraft for your selected server software",
            "env_variable": "MINECRAFT_VERSION",
            "default_value": "Latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Software",
            "description": "Write the server software to install: Paper, Forge, Pufferfish, Purpur or Vanilla",
            "env_variable": "SERVER_SOFTWARE",
            "default_value": "Paper",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Download Path",
            "description": "A URL to use to download a server.jar rather than the ones in the install script. This is not user viewable.",
            "env_variable": "DL_PATH",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "The build number for the paper release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD_NUMBER",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        }
    ]
}