{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY Jexactyl PANEL - jexactyl.com",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-11-06T12:33:57+00:00",
    "name": "Retroactyl Bedrock",
    "author": "mail@retronodes.cloud",
    "description": "Minecraft server software selector for Bedrock Edition, compatible with Intel or AMD-based hardware. Select from Nukkit, PocketmineMP and Vanilla Minecraft.",
    "features": [
        "pid_limit"
    ],
    "docker_images": {
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8"
    },
    "file_denylist": [],
    "startup": ".\/startup.sh",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"server-name\": \"{{server.build.env.SERVERNAME}}\",\r\n            \"gamemode\": \"{{server.build.env.GAMEMODE}}\",\r\n            \"difficulty\": \"{{server.build.env.DIFFICULTY}}\",\r\n            \"allow-cheats\": \"{{server.build.env.CHEATS}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"Server started\"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Ensure SERVER_SOFTWARE is defined (if it\u2019s empty, set it to Vanilla by default)\r\nSERVER_SOFTWARE=\"${SERVER_SOFTWARE:-Vanilla}\"\r\n\r\n# Helper function for Java installation\r\ninstall_java_21() {\r\n    if ! java -version 2>&1 | grep \"21\" &> \/dev\/null; then\r\n        echo \"Java 21 is not installed. Installing Java 21...\"\r\n        \r\n        # Update the package list\r\n\tapt-get update -y\r\n        # Install OpenJDK 21\r\n        if ! apt-get install -y openjdk-21-jdk; then\r\n            echo \"Java installation failed. Please install Java 21 manually.\"\r\n            exit 1\r\n        fi\r\n    else\r\n        echo \"Java 21 is already installed.\"\r\n    fi\r\n}\r\n\r\n# Main installation section\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || { echo \"Failed to navigate to \/mnt\/server\"; exit 1; }\r\n\r\ncase \"$SERVER_SOFTWARE\" in\r\n    \"Nukkit\")\r\n        echo \"Starting Nukkit installation...\"\r\n        SERVER_SOFTWARE=\"Nukkit\"\r\n\r\n\t# Server Files: \/mnt\/server\r\n\tapt-get update && apt-get install -y --no-install-recommends curl wget openssl\r\n\r\n\tcd \/mnt\/server || exit 1\r\n\r\n\t## Only download if a path is provided, otherwise continue.\r\n\tif [ -n \"${DL_PATH}\" ]; then\r\n    \tMODIFIED_DOWNLOAD=$(eval echo \"$DL_PATH\" | sed -e 's\/{{\/${\/g' -e 's\/}}\/}\/g')\r\n    \twget \"$MODIFIED_DOWNLOAD\" -O \"$SERVER_JARFILE\"\r\n\telif [ -z \"${NUKKIT_VERSION}\" ] || [ \"$NUKKIT_VERSION\" == \"latest\" ]; then\r\n    \twget https:\/\/ci.opencollab.dev\/job\/NukkitX\/job\/Nukkit\/job\/master\/lastSuccessfulBuild\/artifact\/target\/nukkit-1.0-SNAPSHOT.jar -O \"$SERVER_JARFILE\"\r\n\telse\r\n    \twget \"https:\/\/ci.opencollab.dev\/job\/NukkitX\/job\/Nukkit\/job\/master\/${NUKKIT_VERSION}\/artifact\/target\/nukkit-1.0-SNAPSHOT.jar\" -O \"$SERVER_JARFILE\"\r\n\tfi\r\n\r\n\tif [ ! -f nukkit.yml ]; then\r\n    \twget https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/bedrock\/nukkit\/nukkit.yml\r\n\tfi\r\n\r\n\tif [ ! -f server.properties ]; then\r\n    \twget https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/bedrock\/nukkit\/server.properties\r\n\tfi\r\n\r\n\techo \"Install completed!\"\r\n\r\n        # Nukkit startup command with unix_args.txt check\r\n        echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -jar server.jar' > startup.sh\r\n        ;;\r\n\r\n    \"PockeminemMP\")\r\n    \techo \"Starting PocketmineMP installation...\"\r\n    \tSERVER_SOFTWARE=\"PocketmineMP\"\r\n\r\n    \tapt-get update\r\n    \tapt-get install -y git curl wget jq file tar unzip zip\r\n\r\n    \tmkdir -p \/mnt\/server\/ # Not required. Only here for parkervcp's local test setup\r\n\r\n    \tcd \/mnt\/server || exit 1\r\n\r\n    \tARCH=$([[ \"$(uname -m)\" == \"x86_64\" ]] && printf \"amd64\" || printf \"arm64\")\r\n\r\n    \t# Update PHP version here\r\n    \tREQUIRED_PHP_VERSION=\"php-8.3-latest\"\r\n\r\n    \t# Shouldn't be possible to be empty, but default to PM5 if it is and convert to uppercase\r\n    \tVERSION=\"${VERSION:-PM5}\"\r\n    \tVERSION=\"${VERSION^^}\"\r\n\r\n    \t# Helper functions\r\n\r\n    \tdownload_php_binary() {\r\n        printf \"Downloading latest PHP %s binary for %s\\n\" \"$REQUIRED_PHP_VERSION\" \"$VERSION\"\r\n        curl --location --progress-bar https:\/\/github.com\/pmmp\/PHP-Binaries\/releases\/download\/php-8.3-latest\/PHP-Linux-x86_64-\"$VERSION\".tar.gz | tar -xzv\r\n    \t}\r\n\r\n    \tset_php_extension_dir() {\r\n        printf \"Configuring php.ini\\n\"\r\n        EXTENSION_DIR=$(find \"bin\" -name '*debug-zts*')\r\n        grep -q '^extension_dir' bin\/php7\/bin\/php.ini && sed -i'bak' \"s{^extension_dir=.*{extension_dir=\\\"$EXTENSION_DIR\\\"{\" bin\/php7\/bin\/php.ini || echo \"extension_dir=\\\"$EXTENSION_DIR\\\"\" >>bin\/php7\/bin\/php.ini\r\n    \t}\r\n\r\n    \tdownload_pmmp() {\r\n        DOWNLOAD_LINK=$(curl -sSL https:\/\/update.pmmp.io\/api?channel=\"$API_CHANNEL\" | jq -r '.download_url')\r\n        printf \"Downloading %s from %s\\n\" \"$VERSION\" \"${DOWNLOAD_LINK}\"\r\n        curl --location --progress-bar \"${DOWNLOAD_LINK}\" --output PocketMine-MP.phar\r\n    \t}\r\n\r\n    \t# We have to convert VERSION into an API channel\r\n    \tif [[ \"${VERSION}\" == \"PM4\" ]]; then\r\n        API_CHANNEL=\"4\"\r\n    \telif [[ \"${VERSION}\" == \"PM5\" ]]; then\r\n        API_CHANNEL=\"stable\"\r\n    \telse\r\n        printf \"Unsupported version: %s\" \"${VERSION}\"\r\n        exit 1\r\n    \tfi\r\n\r\n    \tif [[ \"${ARCH}\" == \"amd64\" ]]; then\r\n        download_php_binary\r\n    \telse\r\n        apt install -y make autoconf automake m4 bzip2 bison g++ cmake pkg-config re2c libtool-bin\r\n        mkdir -p \/mnt\/server\/build_cache\/archives\r\n        mkdir -p \/mnt\/server\/build_cache\/compilation\r\n\r\n        echo \"running curl --location --progress-bar --remote-name https:\/\/raw.githubusercontent.com\/pmmp\/PHP-Binaries\/php\/\"$REQUIRED_PHP_VERSION\"\/compile.sh\"\r\n        curl --location --progress-bar --remote-name https:\/\/raw.githubusercontent.com\/pmmp\/PHP-Binaries\/php\/\"$REQUIRED_PHP_VERSION\"\/compile.sh\r\n        chmod +x compile.sh\r\n\r\n        cat <<EOF\r\n----------------------------------------\r\n|                                      |\r\n|   Compiling PHP Binary for ARM64     |\r\n|                                      |\r\n|  This is a time consuming process    |\r\n----------------------------------------\r\nEOF\r\n\r\n        printf \"\\n\\nCompiling PHP binary, this is a slow process and will take time\\n\"\r\n        THREADS=$(grep -c ^processor \/proc\/cpuinfo) || THREADS=1\r\n        .\/compile.sh -j \"${THREADS}\" -c \/mnt\/server\/build_cache\/archives -l \/mnt\/server\/build_cache\/compilation -P ${VERSION:2}\r\n        rm compile.sh\r\n        rm -rf install_data\/\r\n    \tfi\r\n\r\n    \t# Steps below are the same for both architectures\r\n    \tdownload_pmmp\r\n    \tset_php_extension_dir || exit 1\r\n\r\n    \tif [[ ! -f server.properties ]]; then\r\n        printf \"Downloading default server.properties template\\n\"\r\n        curl --location --progress-bar --remote-name https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/bedrock\/pocketmine_mp\/server.properties\r\n    \tfi\r\n\r\n    \tprintf \"Creating default file and folder structure\\n\"\r\n    \ttouch banned-ips.txt banned-players.txt ops.txt white-list.txt server.log\r\n    \tmkdir -p players worlds plugins resource_packs\r\n\r\n    cat <<EOF\r\n----------------------------------------\r\n|                                      |\r\n|   PocketMine-MP Installation Done    |\r\n|                                      |\r\n----------------------------------------\r\nEOF\r\n\r\n    \t# PocketmineMP startup command with unix_args.txt check\r\n    \techo '.\/bin\/php7\/bin\/php .\/PocketMine-MP.phar --no-wizard --disable-ansi' > startup.sh\r\n    \t;;\r\n\r\n    \"Vanilla\")\r\n    \techo \"Starting Vanilla installation...\"\r\n    \tSERVER_SOFTWARE=\"Vanilla\"\r\n\r\n    \t# Define variables\r\n    \tBASE_URL=\"https:\/\/www.minecraft.net\/bedrockdedicatedserver\/bin-linux\"\r\n    \tDOWNLOAD_FILE=\"bedrock-server.zip\"\r\n\r\n    \t# Fetch the latest version number from GitHub\r\n    \techo \"Fetching the latest Bedrock version...\"\r\n    \tLATEST_VERSION=$(curl -s https:\/\/raw.githubusercontent.com\/retronodes\/mcapi\/main\/vanilla-bedrock)\r\n\r\n    \t# Verify that we successfully retrieved a version number\r\n    \tif [ -z \"$LATEST_VERSION\" ]; then\r\n        echo \"Error: Could not retrieve the latest Bedrock version from GitHub.\"\r\n        exit 1\r\n    \tfi\r\n    \techo \"Latest Bedrock version found: $LATEST_VERSION\"\r\n\r\n    \t# Form the download URL with license agreement parameter\r\n    \tDOWNLOAD_URL=\"${BASE_URL}\/bedrock-server-${LATEST_VERSION}.zip?accept_license=true\"\r\n    \techo \"Formed Download URL: $DOWNLOAD_URL\"\r\n\r\n    \t# Clean up any old installations\r\n    \techo \"Cleaning up old server files...\"\r\n    \trm -f $DOWNLOAD_FILE\r\n    \trm -rf bedrock_server\r\n\r\n    \t# Install necessary packages including unzip\r\n    \tapt-get update\r\n    \tapt-get install -y --no-install-recommends curl unzip\r\n\r\n    \t# Download the Bedrock server with custom headers\r\n    \techo \"Downloading Minecraft Bedrock server from: $DOWNLOAD_URL\"\r\n    \tcurl -L -o $DOWNLOAD_FILE -A \"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/90.0 Safari\/537.36\" \\\r\n    \t-H \"Accept-Language: en\" \\\r\n    \t-H \"Referer: https:\/\/www.minecraft.net\" \\\r\n    \t$DOWNLOAD_URL\r\n\r\n    \t# Check if download was successful\r\n    \tif [ $? -ne 0 ] || [ ! -f $DOWNLOAD_FILE ]; then\r\n        echo \"Error: Failed to download the server file. Check the URL or version.\"\r\n        exit 1\r\n    \tfi\r\n\r\n    \t# Unpack the server files\r\n    \techo \"Unpacking server files...\"\r\n    \tunzip -o $DOWNLOAD_FILE\r\n\r\n    \t# Verify if unzip was successful\r\n    \tif [ $? -ne 0 ]; then\r\n        echo \"Error: Failed to unpack the server files. The downloaded file may not be a valid ZIP.\"\r\n        exit 1\r\n    \tfi\r\n\r\n    \t# Clean up after extracting\r\n    \techo \"Cleaning up downloaded files...\"\r\n    \trm -f $DOWNLOAD_FILE\r\n\r\n    \t# Set execute permissions on the server binary\r\n    \tchmod +x bedrock_server\r\n\r\n\t# Set variables for GLIBC version and installation path\r\n\tGLIBC_VERSION=\"2.30\"\r\n\tGLIBC_PATH=\"\/opt\/glibc-$GLIBC_VERSION\"\r\n\r\n\t# Temporarily unset current directory from LD_LIBRARY_PATH\r\n\texport OLD_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"\r\n\texport LD_LIBRARY_PATH=$(echo \"$LD_LIBRARY_PATH\" | sed 's|.:||g')\r\n\r\n\t# Download and install GLIBC if it doesn't already exist\r\n\tif [ ! -d \"$GLIBC_PATH\" ]; then\r\n    \techo \"GLIBC $GLIBC_VERSION not found. Installing...\"\r\n    \tapt-get update && apt-get install -y wget build-essential gawk bison python3\r\n\r\n    \t# Download GLIBC source\r\n    \twget http:\/\/ftp.gnu.org\/gnu\/libc\/glibc-$GLIBC_VERSION.tar.gz\r\n    \ttar -zxvf glibc-$GLIBC_VERSION.tar.gz\r\n\r\n    \t# Build and install GLIBC\r\n    \tcd glibc-$GLIBC_VERSION\r\n    \tmkdir build && cd build\r\n    \t..\/configure --prefix=$GLIBC_PATH\r\n    \tmake -j$(nproc)\r\n    \tmake install\r\n    \tcd ..\/..\/\r\n\r\n    \t# Clean up\r\n    \trm -rf glibc-$GLIBC_VERSION*\r\n\tfi\r\n\r\n\t# Restore original LD_LIBRARY_PATH\r\n\texport LD_LIBRARY_PATH=\"$OLD_LD_LIBRARY_PATH\"\r\n\r\n\t# Add the new GLIBC library path to LD_LIBRARY_PATH\r\n\texport LD_LIBRARY_PATH=\"$GLIBC_PATH\/lib:$LD_LIBRARY_PATH\"\r\n\r\n    \t# Vanilla startup command with unix_args.txt check\r\n    \techo '.\/bedrock_server' >> startup.sh\r\n\r\n    \techo \"Minecraft Bedrock Server installation completed.\"\r\n    \t;;\r\n\r\n    *)\r\n        echo \"Unrecognized server software: $SERVER_SOFTWARE. Defaulting to Vanilla latest.\"\r\n        echo \"Starting Vanilla installation...\"\r\n        SERVER_SOFTWARE=\"Vanilla\"\r\n\r\n    \t# Define variables\r\n    \tBASE_URL=\"https:\/\/www.minecraft.net\/bedrockdedicatedserver\/bin-linux\"\r\n    \tDOWNLOAD_FILE=\"bedrock-server.zip\"\r\n\r\n    \t# Fetch the latest version number from GitHub\r\n    \techo \"Fetching the latest Bedrock version...\"\r\n    \tLATEST_VERSION=$(curl -s https:\/\/raw.githubusercontent.com\/retronodes\/mcapi\/main\/vanilla-bedrock)\r\n\r\n    \t# Verify that we successfully retrieved a version number\r\n    \tif [ -z \"$LATEST_VERSION\" ]; then\r\n        echo \"Error: Could not retrieve the latest Bedrock version from GitHub.\"\r\n        exit 1\r\n    \tfi\r\n    \techo \"Latest Bedrock version found: $LATEST_VERSION\"\r\n\r\n    \t# Form the download URL with license agreement parameter\r\n    \tDOWNLOAD_URL=\"${BASE_URL}\/bedrock-server-${LATEST_VERSION}.zip?accept_license=true\"\r\n    \techo \"Formed Download URL: $DOWNLOAD_URL\"\r\n\r\n    \t# Clean up any old installations\r\n    \techo \"Cleaning up old server files...\"\r\n    \trm -f $DOWNLOAD_FILE\r\n    \trm -rf bedrock_server\r\n\r\n    \t# Install necessary packages including unzip\r\n    \tapt-get update\r\n    \tapt-get install -y --no-install-recommends curl unzip\r\n\r\n    \t# Download the Bedrock server with custom headers\r\n    \techo \"Downloading Minecraft Bedrock server from: $DOWNLOAD_URL\"\r\n    \tcurl -L -o $DOWNLOAD_FILE -A \"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/90.0 Safari\/537.36\" \\\r\n    \t-H \"Accept-Language: en\" \\\r\n    \t-H \"Referer: https:\/\/www.minecraft.net\" \\\r\n    \t$DOWNLOAD_URL\r\n\r\n    \t# Check if download was successful\r\n    \tif [ $? -ne 0 ] || [ ! -f $DOWNLOAD_FILE ]; then\r\n        echo \"Error: Failed to download the server file. Check the URL or version.\"\r\n        exit 1\r\n    \tfi\r\n\r\n    \t# Unpack the server files\r\n    \techo \"Unpacking server files...\"\r\n    \tunzip -o $DOWNLOAD_FILE\r\n\r\n    \t# Verify if unzip was successful\r\n    \tif [ $? -ne 0 ]; then\r\n        echo \"Error: Failed to unpack the server files. The downloaded file may not be a valid ZIP.\"\r\n        exit 1\r\n    \tfi\r\n\r\n    \t# Clean up after extracting\r\n    \techo \"Cleaning up downloaded files...\"\r\n    \trm -f $DOWNLOAD_FILE\r\n\r\n    \t# Set execute permissions on the server binary\r\n    \tchmod +x bedrock_server\r\n\r\n\t# Set variables for GLIBC version and installation path\r\n\tGLIBC_VERSION=\"2.30\"\r\n\tGLIBC_PATH=\"\/opt\/glibc-$GLIBC_VERSION\"\r\n\r\n\t# Temporarily unset current directory from LD_LIBRARY_PATH\r\n\texport OLD_LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\"\r\n\texport LD_LIBRARY_PATH=$(echo \"$LD_LIBRARY_PATH\" | sed 's|.:||g')\r\n\r\n\t# Download and install GLIBC if it doesn't already exist\r\n\tif [ ! -d \"$GLIBC_PATH\" ]; then\r\n    \techo \"GLIBC $GLIBC_VERSION not found. Installing...\"\r\n    \tapt-get update && apt-get install -y wget build-essential gawk bison python3\r\n\r\n    \t# Download GLIBC source\r\n    \twget http:\/\/ftp.gnu.org\/gnu\/libc\/glibc-$GLIBC_VERSION.tar.gz\r\n    \ttar -zxvf glibc-$GLIBC_VERSION.tar.gz\r\n\r\n    \t# Build and install GLIBC\r\n    \tcd glibc-$GLIBC_VERSION\r\n    \tmkdir build && cd build\r\n    \t..\/configure --prefix=$GLIBC_PATH\r\n    \tmake -j$(nproc)\r\n    \tmake install\r\n    \tcd ..\/..\/\r\n\r\n    \t# Clean up\r\n    \trm -rf glibc-$GLIBC_VERSION*\r\n\tfi\r\n\r\n\t# Restore original LD_LIBRARY_PATH\r\n\texport LD_LIBRARY_PATH=\"$OLD_LD_LIBRARY_PATH\"\r\n\r\n\t# Add the new GLIBC library path to LD_LIBRARY_PATH\r\n\texport LD_LIBRARY_PATH=\"$GLIBC_PATH\/lib:$LD_LIBRARY_PATH\"\r\n\r\n    \t# Vanilla startup command with unix_args.txt check\r\n    \techo '.\/bedrock_server' >> startup.sh\r\n\r\n    \techo \"Minecraft Bedrock Server installation completed.\"\r\n    \t;;\r\nesac\r\n\r\n# Final setup and permissions\r\nchmod +x startup.sh\r\necho \"Setup complete. You may click on the start button.\"",
            "container": "ghcr.io\/pterodactyl\/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "ld lib path",
            "description": "",
            "env_variable": "LD_LIBRARY_PATH",
            "default_value": ".",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Gamemode",
            "description": "Allowed values: \"survival\", \"creative\", or \"adventure\"",
            "env_variable": "GAMEMODE",
            "default_value": "survival",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|in:survival,creative,adventure",
            "field_type": "text"
        },
        {
            "name": "Difficulty",
            "description": "Allowed values: \"peaceful\", \"easy\", \"normal\", or \"hard\"",
            "env_variable": "DIFFICULTY",
            "default_value": "easy",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|in:peaceful,easy,normal,hard",
            "field_type": "text"
        },
        {
            "name": "Allow cheats",
            "description": "Allowed values: \"true\" or \"false\"",
            "env_variable": "CHEATS",
            "default_value": "false",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|in:true,false",
            "field_type": "text"
        },
        {
            "name": "Nukkit Version",
            "description": "The version of Nukkitt to download (using the --rev tag). Use \"latest\" for latest.",
            "env_variable": "NUKKIT_VERSION",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Download Path for Nukkit",
            "description": "A URL to use to download Nukkit rather than building it on the server. This is not user viewable. Use <code>{{DL_VERSION}}<\/code> in the URL to automatically insert the assigned version into the URL. If you do not enter a URL Spigot will build directly in the container (this will fail on low memory containers).",
            "env_variable": "DL_PATH",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the server jarfile to run the Nukkit server",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/",
            "field_type": "text"
        },
        {
            "name": "Minecraft Version",
            "description": "Installs the latest version of Minecraft for your selected server software",
            "env_variable": "MCV",
            "default_value": "Latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Software",
            "description": "Write the server software to install: Nukkit, PocketmineMP or Vanilla",
            "env_variable": "SERVER_SOFTWARE",
            "default_value": "Vanilla",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        }
    ]
}